#! /bin/bash
#
# Script to run unittests, or any other command, and notify
# user using the OS notification mechanism
#
# Usage:
#   unittest-notifier [options] command ...
#
# All arguments will be considered the command to run
#

# Where's the source? The default icons are there...
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  ICONDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$ICONDIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
ICONDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


# Select notifier mechanism depending on availability
if command -v terminal-notifier >/dev/null 2>&1 ; then
    mechanism=terminal-notifier
    notifier=terminal-notifier
elif command -v /Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier >/dev/null 2>&1 ; then
    mechanism=terminal-notifier
    notifier=/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier
elif command -v notify-send >/dev/null 2>&1 ; then
    mechanism=notify-send
    notifier=notify-send
elif command -v growlnotify.exe >/dev/null 2>&1 ; then
    mechanism=growlnotify
    notifier=growlnotify.exe
elif command -v  snoretoast >/dev/null 2>&1 ; then
    mechanism=snoretoast
    notifier=snoretoast
elif command -v  /cygdrive/c/Program\ Files\ \(x86\)/Growl\ for\ Windows/growlnotify.exe >/dev/null 2>&1 ; then
    mechanism=growlnotify
    notifier=/cygdrive/c/Program\ Files\ \(x86\)/Growl\ for\ Windows/growlnotify.exe
fi


os=`uname -s`
if [[ "$os" == *"CYGWIN"* ]] ; then
    os="Cygwin"
fi

# If no known mechanism available, give hints depending on OS
if [ "$mechanism" = "" ] ; then
    echo "ERROR: No known mechanism for notifications found."
    if [ "$os" = "Darwin" ] ; then
        echo "Supported notifier for Darwin/MacOS is 'terminal-notifier' from"
        echo "https://github.com/julienXX/terminal-notifier or via Brew/MacPorts"
    elif [ "$os" = "Linux" ] ; then
        echo "'notify-send' should be available for Linux. Try"
        echo "'sudo <pkgmgr> install notify-send'."
    elif [ "$os" = "Cygwin" ] ; then
        echo "Suggestions for notifiers on Cygwin are"
        echo "'growlnotify' (included with Growl for Windows) from http://www.growlforwindows.com/ and"
        echo "'snoretoast' (Windows notifications) from https://github.com/KDE/snoretoast."
    else
        echo "No idea how to create nice notifications on this OS..."
        echo "Please suggest a mechanism at https://github.com/thoni56/unittest-notifier"
    fi
    exit 1
fi

# Set up options for icons depending on mechanism
case $mechanism in
    terminal-notifier)
        title_prefix="-title "
        message_prefix="-message "
        app_icon_prefix="-appIcon "
        icon_prefix="-contentImage "
        ;;
    notify-send)
        title_prefix=" "
        message_prefix=" "
        icon_prefix="-i "
        ;;
    growlnotify)
        title_prefix="/t:"
        message_prefix=
        icon_prefix="/i:"
        extra="/silent:true"
        ;;
    snoretoast)
        title_prefix="-t "
        message_prefix="-m "
        app_icon_prefix=
        icon_prefix="-p "
        extra="-appId Unittest-notifier -silent"
        ;;
    *)
        echo "Unknown notifier mechanism. Exiting..."
        exit
esac

# Set default values for most options
title_text="Unittests"
start_text="Starting..."
passed_text="Passed"
failed_text="Failed"
app_icon="$ICONDIR"/cgreen-icon.png
start_icon="$ICONDIR"/icon-start.png
passed_icon="$ICONDIR"/icon-passed.png
failed_icon="$ICONDIR"/icon-failed.png

# Then tweak depending on os and mechanism, if needed
if [ "$os" = "Cygwin" ] ; then
    # Need windows paths to icons
    app_icon=`cygpath -w -a "$app_icon"`
    start_icon=`cygpath -w -a "$start_icon"`
    passed_icon=`cygpath -w -a "$passed_icon"`
    failed_icon=`cygpath -w -a "$failed_icon"`
fi
if [ "$mechanism" = "snoretoast" ] ; then
    # No app_icons for snoretoast
    app_icon=
fi

# Handle options
while getopts ":t:v" opt; do
    case $opt in
        t)
            # Title
            title_text="$OPTARG"
            shift 2
            ;;
        v)
            # Verbose, show mechanism used
            verbose=1
            shift 1
            ;;
        \?)
            echo "ERROR: Invalid option -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "ERROR: Option '-$OPTARG' requires an argument." >&2
            exit 1
            ;;
    esac
done

# Is there a command?
if [ "$#" = 0 ] ; then
    echo "ERROR: expecting a command to run"
    echo
    echo "Usage: $0 <options> <command>"
    echo
    echo "Options:"
    echo "  -t <title>    Supply title for notifications"
    echo "  -v            Verbose mode"
    echo ""
    echo "All arguments that are not options, will be the command line that is run."
    exit
fi

# Assemble all notifier options
title="$title_prefix$title_text"
start="$icon_prefix$start_icon $message_prefix$start_text"
passed="$icon_prefix$passed_icon $message_prefix$passed_text"
failed="$icon_prefix$failed_icon $message_prefix$failed_text"

# Debug by uncommenting this
#notifier=/bin/echo

# Indicate start
if [ $verbose = 1 ] ; then
    echo "$notifier" $extra $title $start
fi
"$notifier" $extra $title $start

# Run the command
${@:1}
status=$?

# Indicate pass or fail depending on exit code
if [ $mechanism = "notify-send" ] ; then
    # Stock notify-send can't replace notification so kill all...
    killall notify-osd >/dev/null 2>&1
fi
if [ $status = 0 ] ; then
    "$notifier" $extra $title $passed
else
    "$notifier" $extra $title $failed
fi
